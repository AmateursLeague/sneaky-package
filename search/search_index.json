{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Sneaky Package A ready-to-deploy Python package designed to stealthily integrate files within a machine, ensuring discreet and seamless file operations without detection.</p>"},{"location":"#getting-started","title":"Getting Started","text":""},{"location":"#what-is-sneaky-package","title":"What is Sneaky Package?","text":"<p>Learn about the purpose of Sneaky Package, its features, and how it can enhance your project. Get a comprehensive overview of what the package offers.</p>"},{"location":"#installation-guide","title":"Installation Guide","text":"<p>Follow this guide to set up Sneaky Package quickly and easily from PyPi. Includes system requirements, package dependencies, and troubleshooting steps for common installation issues.</p>"},{"location":"#usage-guide","title":"Usage Guide","text":"<p>Discover how to effectively use the core features of Sneaky Package with step-by-step examples and explanations. This section includes:   - Basic usage scenarios   - Advanced configuration   - Practical examples for various use cases</p> <p>Start exploring the documentation by using the navigation bar or jumping directly into one of the sections above. Happy coding with Sneaky Package!</p>"},{"location":"CHANGELOG/","title":"Changelog","text":""},{"location":"CHANGELOG/#unreleased","title":"[Unreleased]","text":""},{"location":"CHANGELOG/#v01-2024-02-04","title":"[v0.1] - 2024-02-04","text":""},{"location":"CHANGELOG/#added","title":"Added","text":"<ul> <li>Uploaded testing source data.</li> <li>Implemented discreet source code display.</li> </ul>"},{"location":"CHANGELOG/#fixes","title":"Fixes","text":"<ul> <li>No fixes were required for the initial release.</li> </ul>"},{"location":"CHANGELOG/#pre-release","title":"[Pre-release]","text":""},{"location":"CHANGELOG/#v02-2024-02-04","title":"[v0.2] - 2024-02-04","text":""},{"location":"CHANGELOG/#added_1","title":"Added","text":"<ul> <li>Introduces additional source code to PyPI.</li> </ul>"},{"location":"CHANGELOG/#fixes_1","title":"Fixes","text":"<ul> <li>Enhances ease of implementation.</li> </ul>"},{"location":"CHANGELOG/#changes","title":"Changes","text":"<ul> <li>Renamed import from <code>lib</code> to <code>display</code>.</li> </ul>"},{"location":"CHANGELOG/#stable-release","title":"[Stable-Release]","text":""},{"location":"CHANGELOG/#v071-2024-03-29","title":"[v0.7.1] - 2024-03-29","text":""},{"location":"CHANGELOG/#added_2","title":"Added","text":"<ul> <li>Browser Code</li> <li>All subject code</li> </ul>"},{"location":"CHANGELOG/#fixes_2","title":"Fixes","text":"<ul> <li>Integrated functioning code snippets</li> </ul>"},{"location":"CHANGELOG/#changes_1","title":"Changes","text":"<ul> <li>New package added for testing <code>graph</code>.</li> </ul>"},{"location":"CHANGELOG/#stable-release_1","title":"[Stable-Release]","text":""},{"location":"CHANGELOG/#091-2024-04-08","title":"[0.9.1] - 2024-04-08","text":""},{"location":"CHANGELOG/#added_3","title":"Added","text":"<ul> <li>Clipboard feature (src code will copied into os clipboard)</li> </ul>"},{"location":"CHANGELOG/#fixes_3","title":"Fixes","text":"<ul> <li>Bug Fixes for the clipboard feature</li> </ul>"},{"location":"Contributing/","title":"Contribution Guidelines for Sneaky Package","text":""},{"location":"Contributing/#introduction","title":"Introduction","text":"<p>Thank you for your interest in contributing to Sneaky Package! This project is nothing more than a lightweight &amp; faster Python package that aims to highlight and improve security by demonstrating potential vulnerabilities in the system when connected with pip. Your contributions\u2014whether they be code, documentation, or feedback\u2014help foster a collaborative environment and drive innovation in our project.</p> <p>Please follow the guidelines below to ensure a smooth contribution process.</p>"},{"location":"Contributing/#getting-started","title":"Getting Started","text":"<p>To contribute to the Sneaky Package, follow these steps to set up your development environment:</p> <ol> <li> <p>Fork this repository to your GitHub account by clicking the \"Fork\" button in the top right.</p> </li> <li> <p>Clone the Repository:    Open your terminal and run:    <pre><code>git clone https://github.com/YOUR-USERNAME/sneaky-package\ncd sneaky-package\n</code></pre></p> </li> <li> <p>Install Prerequisites:    Ensure you have the following installed:</p> </li> <li>Python 3.x</li> <li> <p>pip (Python package installer)</p> </li> <li> <p>Install the package:    Open your terminal and run:    <pre><code>pip install matplotlib_visual\n</code></pre></p> </li> </ol> <p>Create a file or open Python in the terminal and enter the following code:    <pre><code>from matplotlib_visual.display import featureName  \nfeatureName(\"fileName\", 1234) # password integer\n</code></pre></p> <pre><code>  - `display` - A method that contains features  \n  - `featureName` - Check out `display.py` in the repo and use the required method name (feature).\n</code></pre>"},{"location":"Contributing/#understanding-the-codebase","title":"Understanding the Codebase","text":"<p>Before contributing, take time to familiarize yourself with the structure of the project by reading the README file.     - This project is beginner-friendly with most features implemented in minimal lines of code.    - Codebase is compact, lightweight and faster.    - Research thoroughly to understand how to implement stealthy features.    - Review comments and docstrings within the code to grasp how each component works.</p>"},{"location":"Contributing/#how-to-contribute","title":"How to Contribute","text":"<p>Follow these steps to make your contributions:</p>"},{"location":"Contributing/#step-1-identify-an-issue","title":"Step 1: Identify an Issue","text":"<p>First, check for any existing issues in the repository. If you want to report a new issue, please make sure to follow the Issue Template provided below:</p> <ul> <li>Issue Template:<ul> <li>Issue Title: A concise and descriptive title.</li> <li>Description: Clear and detailed description of the issue or feature request.</li> <li>Steps to Reproduce (if applicable): Detailed steps to reproduce the issue.</li> <li>Expected Behavior: What you expected to happen.</li> <li>Actual Behavior: What actually happened.</li> </ul> </li> </ul> <p>If the issue already exists or you're interested in fixing something, feel free to pick it up.</p>"},{"location":"Contributing/#step-2-fork-the-repository","title":"Step 2: Fork the Repository","text":"<p>Click on the \"Fork\" button at the top right of the repository page to create your copy.</p>"},{"location":"Contributing/#step-3-create-a-branch","title":"Step 3: Create a Branch","text":"<p>After cloning your forked repository, create a new branch for your changes:    <pre><code>git checkout -b feature/your-feature-name\n</code></pre></p>"},{"location":"Contributing/#step-4-make-changes","title":"Step 4: Make Changes","text":"<p>Implement your changes adhering to coding standards and best practices outlined in this project.</p>"},{"location":"Contributing/#step-5-testing","title":"Step 5: Testing","text":"<p>Write tests for any new features or bug fixes you implement. Ensure all tests pass before submitting your contribution.</p>"},{"location":"Contributing/#submitting-contributions","title":"Submitting Contributions","text":"<p>To submit your changes:</p> <ol> <li> <p>Commit your changes with a clear message:    <pre><code>git commit -m \"Description of changes made\"\n</code></pre></p> </li> <li> <p>Push your branch to your forked repository:    <pre><code>git push origin feature/your-feature-name\n</code></pre></p> </li> <li> <p>Go to the original repository and click \"Compare &amp; Pull Request\". When submitting the PR, please follow this PR Format:</p> </li> <li> <p>Pull Request Template:</p> <ul> <li>Title: Short and descriptive title for your pull request.</li> <li>Description: Detailed description of what changes you made and why.</li> <li>Issue Reference: Mention the issue number this PR addresses (if applicable).</li> </ul> </li> </ol> <p>4. Code Review &amp; Feedback: The project maintainers will review your pull request. You may be asked to make some changes before your PR can be merged. Please respond to the feedback and make the necessary adjustments.</p> <p>If you have any questions or doubts during the review process, feel free to ask.</p>"},{"location":"Contributing/#reporting-issues","title":"Reporting Issues","text":"<p>If you encounter bugs or have feature suggestions:</p> <ul> <li>Report them by creating a new issue in the GitHub repository.</li> <li>Provide clear and concise descriptions, including steps to reproduce bugs or use cases for feature requests.</li> </ul>"},{"location":"Contributing/#acknowledgments","title":"Acknowledgments","text":"<p>We appreciate all contributions! If you have any doubts or need clarification at any point, please feel free to reach out by creating an issue or asking a question in the PR comments.</p>"},{"location":"Contributing/#happy-coding","title":"Happy coding!","text":""},{"location":"LICENSE/","title":"License","text":"<p>The project works by highlighting and improving security measures by demonstrating potential vulnerabilities when the system is connected with pip. It is licensed under the GPL 3.0, allowing you to sneakily use and modify it as needed.</p>"},{"location":"PyPi_Setup/","title":"PyPi setup","text":""},{"location":"PyPi_Setup/#1-introduction","title":"1. Introduction","text":"<p>In this guide, We will provide you with a comprehensive overview of how to set up and deploy a Python package to the Python Package Index (PyPI). This package is designed to facilitate the sharing of Python projects, enabling you to install it easily using pip.</p>"},{"location":"PyPi_Setup/#purpose","title":"Purpose","text":"<p>The objectives of this guide is to help you to:</p> <ul> <li>Understand the necessary setup for your package</li> <li>Deploy your package to PyPI</li> <li>Install your package easily on any system</li> </ul>"},{"location":"PyPi_Setup/#2-pre-requisites","title":"2. Pre-requisites","text":"<p>Before you begin, ensure that you have the following tools installed:</p>"},{"location":"PyPi_Setup/#required-tools","title":"Required Tools","text":"<ul> <li>Python (version 3.6 or above)</li> <li>pip (Python package manager)</li> <li>setuptools, wheel, twine (for building and uploading packages)</li> </ul>"},{"location":"PyPi_Setup/#3-installations","title":"3. Installations","text":"<p>To prepare your environment, upgrade pip, setuptools, and wheel:</p> <pre><code>sudo python -m pip install --upgrade pip setuptools wheel\n</code></pre> <p>Next, install <code>tqdm</code> and <code>Twine</code>:</p> <pre><code>sudo python -m pip install tqdm\nsudo python -m pip install --user --upgrade twine\n</code></pre> <p>These tools are essential for building and uploading your package.</p>"},{"location":"PyPi_Setup/#4-project-structure","title":"4. Project Structure","text":"<pre><code>sneaky_package/\n\u2502\n\u251c\u2500\u2500 package/                              # Main package directory\n\u2502   \u251c\u2500\u2500 stash/                            # Stash directory for files integration\n\u2502   \u2502   \u2514\u2500\u2500 test.py                       # test script for checking\n\u2502   \u251c\u2500\u2500 display.py                        \n\u2502   \u251c\u2500\u2500 graph.py                          \n\u2502   \u251c\u2500\u2500 models.py                        \n\u2502   \u2514\u2500\u2500 piechart.py                      \n\u251c\u2500\u2500 LICENSE                               # License information for the project\n\u251c\u2500\u2500 README.md                             # Documentation about the project\n\u2514\u2500\u2500 setup.py                              # Setup script for packaging the project\n</code></pre>"},{"location":"PyPi_Setup/#note","title":"Note","text":"<p>Feel free to change any filenames or directory names to better suit your needs. </p> <p>The filenames in the stash/ directory are aliases, you can modify them as necessary!</p>"},{"location":"PyPi_Setup/#explanation-of-key-files-directories","title":"Explanation of Key Files/ Directories","text":"<ul> <li>package/:   The <code>package</code> directory is the main directory containing the core functionality of your project. Each file within this directory serves a specific purpose:</li> <li>display.py: Contains functions related to displaying information or output to the user.</li> <li>graph.py: Provides functionalities for displaying and copying code snippets to the clipboard, often involving authentication mechanisms.</li> <li>models.py: Contains data models and associated methods that manage the data being processed or manipulated within the package.</li> <li> <p>piechart.py: Includes functionalities for plotting and copying code snippets, typically related to pie chart representations.</p> </li> <li> <p>setup.py: This file is essential for packaging your project using setuptools. It specifies metadata about the package, including:</p> </li> <li><code>name</code>: The name of the package, which should be unique within the Python Package Index (PyPI).</li> <li><code>version</code>: The current version of the package.</li> <li><code>packages</code>: Uses <code>find_packages()</code> to automatically find and include all packages and subpackages.</li> <li><code>description</code>: A brief summary of what the package does.</li> <li><code>author</code> and <code>author_email</code>: Information about the package author.</li> <li><code>license</code>: Specifies the license under which the package is released.</li> <li> <p><code>install_requires</code>: A list of dependencies that are required for the package to function, allowing automatic installation of these packages when your package is installed.</p> </li> <li> <p>LICENSE: Contains the legal information regarding the usage, modification, and distribution of the project. This file helps clarify the terms under which the code can be used by others.</p> </li> <li> <p>README.md: Provides an overview of the project, including how to install and use it. It serves as the first point of contact for users and contributors, helping them understand the purpose of the project and how to get started.</p> </li> </ul>"},{"location":"PyPi_Setup/#5-building-the-package","title":"5. Building the Package","text":""},{"location":"PyPi_Setup/#step-by-step-instructions","title":"Step-by-Step Instructions","text":"<ol> <li>Create or update the <code>setup.py</code> file in the root directory using the following structure:</li> </ol> <pre><code>from setuptools import setup, find_packages\n\nsetup(\n    name='custom_package_name',            # Replace with your actual package name\n    version='0.1',                         # Update version as needed\n    packages=find_packages(),              # Automatically find package directories\n    description='Your custom description', # Provide a brief description of your package\n    author='custom_author_name',           # Add your name or organization\n    author_email='youremail@gmail.com',    # Add your email address\n    license='GPL 3.0',                     # Specify the license type\n    install_requires=[                     # List any package dependencies here\n        # e.g., 'numpy&gt;=1.18.0',\n    ],\n)\n</code></pre> <p>Note:  Ensure that your package's structure is correct and that the <code>setup.py</code> file is properly configured.</p> <ol> <li>Build the Package by running:</li> </ol> <pre><code>python setup.py sdist bdist_wheel\n</code></pre> <p>This command will create a <code>dist/</code> directory containing <code>.tar.gz</code> and <code>.whl</code> files.</p>"},{"location":"PyPi_Setup/#6-uploading-to-pypi","title":"6. Uploading to PyPI","text":""},{"location":"PyPi_Setup/#detailed-steps-for-deployment","title":"Detailed Steps for Deployment","text":"<ol> <li> <p>Create a PyPI Account:</p> </li> <li> <p>Go to PyPI and click on \"Register\" to create an account if you don\u2019t have one.</p> <p></p> </li> <li> <p>Fill in the required information (username, password, email) and click on Create Account.</p> </li> <li>After logging in, verify your email address by clicking on the link sent to your email.</li> <li> <p>Once verified, go to your account settings and navigate to the API tokens section.</p> <p></p> </li> </ol> <p>### NOTE: To create an API token, you must enable Two-factor Authentication</p> <ul> <li> <p>Click on \"Add API token\" to generate a new token. This token will be used for authentication when uploading packages.</p> <p></p> <p>under \"select scope\", select your project.</p> </li> <li> <p>Upload the Package Using Twine:</p> <ul> <li>First, ensure you have Twine installed. If not, you can install it using pip:  <pre><code>pip install twine\n</code></pre></li> <li>Next, navigate to the directory containing your package files in the terminal.</li> <li>Create a source distribution of your package by running:  <pre><code>python setup.py sdist bdist_wheel\n</code></pre></li> <li>Use your API token for authentication when uploading:  <pre><code>twine upload dist/* --username __token__ --password &lt;YOUR_API_TOKEN&gt;\n</code></pre></li> <li>Replace <code>&lt;YOUR_API_TOKEN&gt;</code> with the actual token you generated earlier.</li> <li>You should see a confirmation message once the upload is successful.</li> </ul> </li> <li> <p>Make sure Twine is installed and run:</p> </li> </ul> <pre><code>twine upload dist/*\n</code></pre> <p>This command will prompt you for your PyPI credentials. If you haven't logged in yet, you'll need to enter them.</p>"},{"location":"PyPi_Setup/#optional-upload-using-pypi-api-token","title":"Optional: Upload Using PyPI API Token","text":"<ol> <li>Create an API Token on PyPI:</li> <li>Log into your PyPI account.</li> <li>Go to Account Settings and generate an API token.</li> <li> <p>Store the token securely.</p> </li> <li> <p>Upload Package with API Token:</p> </li> </ol> <pre><code>twine upload dist/* --username __token__ --password &lt;YOUR_API_TOKEN&gt;\n</code></pre> <p>Replace <code>&lt;YOUR_API_TOKEN&gt;</code> with your generated token.</p>"},{"location":"PyPi_Setup/#7-installation-instructions","title":"7. Installation Instructions","text":"<p>Once your package is deployed, users can install it via pip:</p> <pre><code>pip install your_package_name\n</code></pre> <p>This command will download and install the latest version of your package from PyPI.</p>"},{"location":"PyPi_Setup/#8-troubleshooting","title":"8. Troubleshooting","text":""},{"location":"PyPi_Setup/#common-issues-and-solutions","title":"Common Issues and Solutions","text":"<ul> <li>Issue: Build fails due to missing setuptools or wheel Solution: Ensure you have the latest versions installed:</li> </ul> <pre><code>python -m pip install --upgrade setuptools wheel\n</code></pre> <ul> <li> <p>Issue: Twine upload failed with authentication error Solution: Verify that you are using the correct PyPI token; regenerate it if necessary.</p> </li> <li> <p>Issue: Unable to find package after uploading Solution: Double-check that the package name in your <code>setup.py</code> matches what was uploaded on PyPI.</p> </li> <li> <p>Issue: Invalid version error Solution: Ensure your version number follows the correct format (e.g., <code>0.1</code>, <code>1.0.0</code>).</p> </li> </ul>"},{"location":"about/","title":"SNEAKY PACKAGE \ud83d\udc7e","text":"<p>A ready-to-deploy Python package designed to stealthily integrate files within a machine, ensuring discreet and seamless file operations without detection. This project is nothing more than a lightweight &amp; faster Python package that aims to highlight and improve security by demonstrating potential vulnerabilities in the system when connected with pip.</p>"},{"location":"about/#key-features","title":"\u2728 Key Features \u2728","text":""},{"location":"about/#designed-to-look-conventional","title":"\ud83d\udcbe Designed to Look Conventional","text":"<ul> <li>The package installs like any normal Python package, but its main target is to perform sneaky functions that are unfavorable for users.</li> </ul>"},{"location":"about/#installing-without-getting-noticed","title":"\ud83d\udce5 Installing Without Getting Noticed","text":"<ul> <li>One key feature of the package is that it is designed in such a way that it becomes difficult to detect its installation. The download and installation can be done without getting caught.</li> </ul>"},{"location":"about/#cross-platform-package","title":"\ud83d\udda5\ufe0f Cross-Platform Package","text":"<ul> <li>The package runs across all major operating systems, including Windows, Linux, and macOS.</li> </ul>"},{"location":"about/#how-to-get-started-","title":"\ud83d\udee0\ufe0fHow to Get Started-","text":""},{"location":"about/#installations","title":"\ud83d\udd27 Installations:","text":"<pre><code>pip install matplotlib-visual\n</code></pre> <p>Note: The <code>matplotlib-visual</code> package has been implemented by Project Manager and has details specific to him, you are suggested to follow the steps above and fork the repository and upload a package.</p>"},{"location":"about/#execution","title":"\u23f1\ufe0fExecution:","text":"<ol> <li>Create a Python file and enter any of the code snippets below.</li> <li>Or, open a terminal and run Python interactively: <pre><code>python\n</code></pre></li> </ol>"},{"location":"about/#progress-so-far","title":"\ud83d\udccaProgress so far:","text":"<ul> <li> <p>\ud83d\udccdDisplaying source code in the console output. <pre><code>    from matplotlib_visual.show import display\n    display(\"&lt;filename-without-extension&gt;\")\n</code></pre></p> <p><code>show</code> method displays source code in the console. </p> </li> <li> <p>\ud83d\udccdStealth Copy to Clipboard for a more secure method. <pre><code>    from matplotlib_visual.clip import display\n    display(\"&lt;filename-without-extension&gt;\")\n</code></pre></p> <p><code>clip</code> method copies the source code to the system's clipboard. </p> </li> <li> <p>\ud83d\udccdWriting the source code into the program's root directory. <pre><code>    from matplotlib_visual.write import display\n    display(\"&lt;filename-without-extension&gt;\")\n</code></pre></p> <p><code>write</code> method writes the file in the root directory of execution. </p> </li> <li> <p>\ud83d\udccdWeb Scraping from a cl1p.net clipboard. <pre><code>     from package_name.clp import grab\n     grab('url-name')\n</code></pre></p> <p><code>grab</code> method retrieves the clipboard's text content from the specified URL and displays it in the system console. If no content is found, a message indicating \"nothing found\" is returned. </p> </li> </ul>"},{"location":"about/#how-to-contribute-to-this-project","title":"\ud83d\ude80 How to Contribute to This Project","text":"<p>We welcome all contributors to our project Sneaky-Package. Before contributing we request you to get familiar with the project. The project is beginner friendly and you can find features you would like to improve including bugs, enhancements or documentation.  Here are steps to start contributing: </p> <ol> <li>\ud83c\udf74 Fork the Repository </li> <li>Go to the repository page.</li> <li> <p>Click the Fork button (top right) to create a copy in your GitHub account.</p> </li> <li> <p>\ud83d\udcbb Clone Your Fork </p> </li> <li>Open your terminal and run:      <pre><code>git clone https://github.com/ENTER-YOUR-USERNAME/Sneaky-package.git\n</code></pre></li> <li> <p>You have to enter your Github username in above code. </p> </li> <li> <p>\ud83c\udf3f Create a New Branch </p> </li> <li> <p>Create a new branch for your work to ensure that changes made by other contributors don't overlap with yours:      <pre><code>git switch YOUR-BRANCH-NAME\n</code></pre></p> </li> <li> <p>\ud83d\udee0\ufe0f Make Your Changes</p> </li> <li> <p>Make the required changes in the package, and contact the project manager this-is-yaash for any queries.</p> </li> <li> <p>\u2705 Finalize Your Changes</p> </li> <li> <p>Before you proceed to the next step ensure all changes are made and check them once again before making the final commit.</p> </li> <li> <p>\ud83d\udcac Commit Your Changes </p> </li> <li> <p>Once ready, commit them with a descriptive message:      <pre><code>git add .\ngit commit -m \"Added feature X or Fixed issue Y\"\n</code></pre></p> </li> <li> <p>\ud83d\udce4 Push Your Changes</p> </li> <li> <p>Push your changes to your forked repository:      <pre><code>git push origin YOUR-BRANCH-NAME\n</code></pre></p> </li> <li> <p>\ud83d\udd04 Create a Pull Request (PR) </p> </li> <li>Go back to the original repository here.</li> <li> <p>Click the Compare &amp; pull request button, write a short description of your changes, and submit the PR.</p> </li> <li> <p>\ud83d\udd0e Review Changes</p> </li> <li>The project manager will review your PR, and if approved, your request will be merged.</li> </ol>"},{"location":"about/#note-for-contributors-","title":"\ud83d\udcd1Note for Contributors-","text":"<ul> <li>This package integrates source files into a target machine using the <code>stash/</code> directory.</li> <li>A test file is provided\u2014run it to ensure that the contents of the files inside the stash appear on the target machine.</li> <li>Filenames like <code>clip.py</code>, <code>show.py</code>, and <code>write.py</code> are aliases to avoid detection of sensitive operations.</li> <li>If you find any vulnerabilities, please raise an issue! \u26a0\ufe0f</li> </ul>"},{"location":"about/#technologies-description","title":"Technologies &amp; Description","text":"<ul> <li>This project is developed entirely in Python.</li> <li>The codebase is compact and lightweight, allowing for faster installation and execution.</li> <li>All features are built using Python's built-in modules, making this project an ideal choice for beginners looking to explore package development without external dependencies.</li> </ul> <p>Big thanks to all the contributors! \ud83c\udf89</p>"},{"location":"about/#ending-note","title":"\ud83d\udc8c Ending Note","text":"<p>We thank all the contributors for playing their part in the project, we really appreciate your efforts. We encourage other contributors to explore the package and help us enhance it, your contributions are valuable.</p>"},{"location":"about/#licence","title":"\ud83e\udeaaLicence","text":"<p>The project works by highlighting and improving security measure by demonstrating potential vulnerabilities when the system connected with pip. It is licensed under the GPL 3.0, allowing you to sneakily use and modify it as needed.</p> <p>Happy sneaking! \ud83e\udd2b</p>"},{"location":"contributing/","title":"Contributing Guidelines","text":""},{"location":"contributing/#introduction","title":"Introduction","text":"<p>Thank you for your interest in contributing to Sneaky Package! This project is nothing more than a lightweight &amp; faster Python package that aims to highlight and improve security by demonstrating potential vulnerabilities in the system when connected with pip. Your contributions\u2014whether they be code, documentation, or feedback\u2014help foster a collaborative environment and drive innovation in our project.</p> <p>Please follow the guidelines below to ensure a smooth contribution process.</p>"},{"location":"contributing/#getting-started","title":"Getting Started","text":"<p>To contribute to the Sneaky Package, follow these steps to set up your development environment:</p> <ol> <li> <p>Fork this repository to your GitHub account by clicking the \"Fork\" button in the top right.</p> </li> <li> <p>Clone the Repository:    Open your terminal and run:    <pre><code>git clone https://github.com/YOUR-USERNAME/sneaky-package\ncd sneaky-package\n</code></pre></p> </li> <li> <p>Install Prerequisites:    Ensure you have the following installed:</p> </li> <li>Python 3.x</li> <li> <p>pip (Python package installer)</p> </li> <li> <p>Install the package:    Open your terminal and run:    <pre><code>pip install matplotlib_visual\n</code></pre></p> </li> </ol> <p>Create a file or open Python in the terminal and enter the following code:    <pre><code>from matplotlib_visual.display import featureName  \nfeatureName(\"fileName\", 1234) # password integer\n</code></pre></p> <pre><code>  - `display` - A method that contains features  \n  - `featureName` - Check out `display.py` in the repo and use the required method name (feature).\n</code></pre>"},{"location":"contributing/#understanding-the-codebase","title":"Understanding the Codebase","text":"<p>Before contributing, take time to familiarize yourself with the structure of the project by reading the README file.     - This project is beginner-friendly with most features implemented in minimal lines of code.    - Codebase is compact, lightweight and faster.    - Research thoroughly to understand how to implement stealthy features.    - Review comments and docstrings within the code to grasp how each component works.</p>"},{"location":"contributing/#how-to-contribute","title":"How to Contribute","text":"<p>Follow these steps to make your contributions:</p>"},{"location":"contributing/#step-1-identify-an-issue","title":"Step 1: Identify an Issue","text":"<p>First, check for any existing issues in the repository. If you want to report a new issue, please make sure to follow the Issue Template provided below:</p> <ul> <li>Issue Template:<ul> <li>Issue Title: A concise and descriptive title.</li> <li>Description: Clear and detailed description of the issue or feature request.</li> <li>Steps to Reproduce (if applicable): Detailed steps to reproduce the issue.</li> <li>Expected Behavior: What you expected to happen.</li> <li>Actual Behavior: What actually happened.</li> </ul> </li> </ul> <p>If the issue already exists or you're interested in fixing something, feel free to pick it up.</p>"},{"location":"contributing/#step-2-fork-the-repository","title":"Step 2: Fork the Repository","text":"<p>Click on the \"Fork\" button at the top right of the repository page to create your copy.</p>"},{"location":"contributing/#step-3-create-a-branch","title":"Step 3: Create a Branch","text":"<p>After cloning your forked repository, create a new branch for your changes:    <pre><code>git checkout -b feature/your-feature-name\n</code></pre></p>"},{"location":"contributing/#step-4-make-changes","title":"Step 4: Make Changes","text":"<p>Implement your changes adhering to coding standards and best practices outlined in this project.</p>"},{"location":"contributing/#step-5-testing","title":"Step 5: Testing","text":"<p>Write tests for any new features or bug fixes you implement. Ensure all tests pass before submitting your contribution.</p>"},{"location":"contributing/#submitting-contributions","title":"Submitting Contributions","text":"<p>To submit your changes:</p> <ol> <li> <p>Commit your changes with a clear message:    <pre><code>git commit -m \"Description of changes made\"\n</code></pre></p> </li> <li> <p>Push your branch to your forked repository:    <pre><code>git push origin feature/your-feature-name\n</code></pre></p> </li> <li> <p>Go to the original repository and click \"Compare &amp; Pull Request\". When submitting the PR, please follow this PR Format:</p> </li> <li> <p>Pull Request Template:</p> <ul> <li>Title: Short and descriptive title for your pull request.</li> <li>Description: Detailed description of what changes you made and why.</li> <li>Issue Reference: Mention the issue number this PR addresses (if applicable).</li> </ul> </li> </ol> <p>4. Code Review &amp; Feedback: The project maintainers will review your pull request. You may be asked to make some changes before your PR can be merged. Please respond to the feedback and make the necessary adjustments.</p> <p>If you have any questions or doubts during the review process, feel free to ask.</p>"},{"location":"contributing/#reporting-issues","title":"Reporting Issues","text":"<p>If you encounter bugs or have feature suggestions:</p> <ul> <li>Report them by creating a new issue in the GitHub repository.</li> <li>Provide clear and concise descriptions, including steps to reproduce bugs or use cases for feature requests.</li> </ul>"},{"location":"contributing/#acknowledgments","title":"Acknowledgments","text":"<p>We appreciate all contributions! If you have any doubts or need clarification at any point, please feel free to reach out by creating an issue or asking a question in the PR comments.</p>"},{"location":"contributing/#happy-coding","title":"Happy coding!","text":""},{"location":"how_to_use_package/","title":"\ud83d\ude80 Quick Start Guide for <code>sneaky-package</code>","text":""},{"location":"how_to_use_package/#installation","title":"\ud83d\udd27Installation:","text":"<pre><code>pip install matplotlib_visual\n</code></pre> <p>Note: The <code>matplotlib_visual</code> package has been implemented by this-is-yaash and contains user-specific content. You are advised to follow the steps in the <code>README.md</code> to deploy your own Python package and upload it accordingly.</p>"},{"location":"how_to_use_package/#execution","title":"\u23f1\ufe0fExecution:","text":"<ol> <li>Create a Python file with .py extension and enter any of the code snippets below.</li> <li>Or, open a terminal and run Python interactively: <pre><code>python\n</code></pre></li> </ol>"},{"location":"how_to_use_package/#features-of-this-package","title":"\ud83d\udccaFeatures of this package:","text":"<ul> <li>\ud83d\udccdDisplays source code in the console output.</li> </ul> <p><code>models</code> method displays source code of the file or python code snipped that has been copied from the file which was passed as an argument <pre><code>    from package.models import display\n    display(\"&lt;filename-without-extension&gt;\")\n</code></pre></p> <ul> <li>\ud83d\udccdStealth Copy to Clipboard for a more secure method.</li> </ul> <p><code>graph</code> method copies the source code to the system's clipboard. <pre><code>    from package.graph import display\n    display(\"&lt;filename-without-extension&gt;\")\n</code></pre></p> <ul> <li>\ud83d\udccdWrites the source code into the program's root directory.</li> </ul> <p><code>piechart</code> method writes the file in the root directory of execution. <pre><code>    from package.piechart import display\n    display(\"&lt;filename-without-extension&gt;\")\n</code></pre></p> <ul> <li>\ud83d\udccdWeb Scraping from cl1p.net clipboard.</li> </ul> <p><code>grab</code> method retrieves the clipboard's text content from the specified URL and displays it in the system console. If no content is found, a message indicating \"nothing found\" is returned. <pre><code>     from package.clp import grab\n     grab('url-name')\n</code></pre></p> <p>Note: <code>package</code> refers to the name of your own Python package that you have deployed on PyPI. Replace <code>package</code> with the name of the package you uploaded to PyPI.</p>"},{"location":"installation/","title":"Installation Guide","text":"<p>Welcome to the installation guide for <code>sneaky-package</code>. This document will walk you through the process of setting up and running the package on your system.</p>"},{"location":"installation/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, ensure that your system meets the following requirements:</p> <ul> <li>Python  version 3.6 or above</li> <li>pip Python package installer</li> </ul>"},{"location":"installation/#installation-steps","title":"Installation Steps","text":"<p>Follow these steps to install <code>sneaky-package</code>:</p> <ol> <li>Clone the Repository</li> </ol> <p>Open your terminal and run the following commands:</p> <pre><code>git clone https://github.com/AmateursLeague/sneaky-package \ncd sneaky-package\n</code></pre> <ol> <li>Install the Package</li> </ol> <p>Once you're in the project directory, install the package using pip:</p> <pre><code>pip install .\n</code></pre>"},{"location":"installation/#verifying-the-installation","title":"Verifying the Installation","text":"<p>To ensure that the package has been installed correctly, run the following command:</p> <pre><code>python -c \"import sneaky_package; print('Sneaky Package installed successfully!')\"\n</code></pre> <p>If the installation was successful, you should see the message \"Sneaky Package installed successfully!\" printed to your console.</p>"},{"location":"installation/#additional-steps","title":"Additional Steps","text":"<p>If you encounter any issues during installation, you may need to install additional dependencies. Run the following command to install all required packages:</p> <pre><code>pip install -r requirements.txt\n</code></pre>"},{"location":"installation/#running-the-package","title":"Running the Package","text":""},{"location":"installation/#basic-usage","title":"Basic Usage","text":"<p>To use <code>sneaky-package</code> in your Python scripts:</p> <pre><code>from sneaky_package import main_function\nmain_function()\n</code></pre>"},{"location":"installation/#command-line-interface","title":"Command Line Interface","text":"<p><code>sneaky-package</code> also provides a command-line interface. To see available options, run:</p> <pre><code>sneaky-package --help\n</code></pre>"},{"location":"installation/#troubleshooting","title":"Troubleshooting","text":"<p>If you encounter any issues during the installation or usage of <code>sneaky-package</code>, try the following:</p> <ul> <li>Permission Issues: If you face permission-related errors, try running the commands with <code>sudo</code>:</li> </ul> <pre><code>sudo pip install .\n</code></pre> <ul> <li> <p>Debugging: For more detailed information about any errors, check the log files located in the <code>logs/</code> directory of the package.</p> </li> <li> <p>Up-to-date Information: For the most current information and potential known issues, refer to our GitHub README.</p> </li> </ul> <p>If you continue to experience problems, please open an issue on our GitHub repository.</p> <p>Thank you for installing <code>sneaky-package</code>! If you have any questions or need further assistance, please don't hesitate to reach out to our support team.</p>"},{"location":"usage/","title":"Getting Started","text":""},{"location":"usage/#getting-started","title":"Getting Started","text":""},{"location":"usage/#installation","title":"Installation","text":"<p>To install the Sneaky Package, run the following command in your terminal: <pre><code>pip install matplotlib-visual\n</code></pre></p> <p>Note: The <code>matplotlib-visual</code> package has been implemented by Project Manager and has details specific to him, you are suggested to follow the steps above and fork the repository and upload a package.</p>"},{"location":"usage/#basic-usage","title":"Basic Usage","text":"<p>After installation, you can use the Sneaky Package in your Python scripts or interactively in a Python shell. Here's a simple example: <pre><code>from matplotlib_visual.show import display\ndisplay(\"&lt;filename-without-extension&gt;\")\n</code></pre> This will display the source code of the specified file in the console.</p>"},{"location":"usage/#advanced-features","title":"Advanced Features","text":"<p>The Sneaky Package offers more advanced features, such as: - Stealth Copy to Clipboard: Copies the source code to the system's clipboard for a more secure method. <pre><code>from matplotlib_visual.clip import display\ndisplay(\"&lt;filename-without-extension&gt;\")\n</code></pre> - Writing the source code: Writes the file in the root directory of execution. <pre><code>from matplotlib_visual.write import display\ndisplay(\"&lt;filename-without-extension&gt;\")\n</code></pre> - Web Scraping: Retrieves the clipboard's text content from a specified URL and displays it in the system console. <pre><code>from package_name.clp import grab\ngrab('url-name')\n</code></pre></p>"},{"location":"usage/#licence","title":"Licence","text":"<p>The project works by highlighting and improving security measure by demonstrating potential vulnerabilities when the system connected with pip. It is licensed under the GPL 3.0, allowing you to sneakily use and modify it as needed.</p> <p>Happy sneaking! \ud83e\udd2b</p>"}]}