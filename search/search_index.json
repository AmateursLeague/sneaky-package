{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#getting-started","title":"Getting Started","text":""},{"location":"#what-is-sneaky-package","title":"What is Sneaky Package?","text":"<p>A ready-to-deploy Python package designed to \ud83d\udd75\ufe0f\u200d\u2642\ufe0f stealthily integrate files within a machine, ensuring \ud83d\udee1\ufe0f discreet and seamless file operations without detection.</p>"},{"location":"#how-it-works","title":"How it Works?","text":"<p>matplotlib-visual is a ready-to-deploy package that demonstrates content management by providing dedicated functions for displaying, copying, saving, and sharing content. Users can easily download this repository, store their files in the <code>stash/</code> folder, and deploy their own package to integrate these functionalities into other machines.</p>"},{"location":"#development-guide","title":"Development Guide","text":"<p>Follow this guide to fork or clone this repository, install dependencies, and build and deploy your own package quickly and easily from PyPI. It includes instructions on setting up your environment and troubleshooting common installation issues.</p> <p>Start exploring the documentation by using the navigation bar or jumping directly into one of the sections above. Happy coding with Sneaky Package!</p>"},{"location":"CHANGELOG/","title":"Changelog","text":""},{"location":"CHANGELOG/#stable-release","title":"[Stable-Release]","text":""},{"location":"CHANGELOG/#v101-19-10-2024","title":"v1.0.1 - 19-10-2024","text":""},{"location":"CHANGELOG/#fixes","title":"Fixes:","text":"<ul> <li>Added support for all file extensions, saving files with the same extension (<code>write.py</code>).</li> <li>Passwords now accept <code>int</code> as an argument instead of <code>str</code>.</li> </ul>"},{"location":"CHANGELOG/#additions","title":"Additions:","text":"<ul> <li><code>display.py</code> has been implemented with all three features: <code>show</code>, <code>clip</code>, and <code>write</code>.</li> </ul>"},{"location":"CHANGELOG/#v10-2024-10-13","title":"v1.0 - 2024-10-13","text":""},{"location":"CHANGELOG/#changes","title":"Changes","text":"<p>Naming conventions of the features are changed to avoid confusion for contributors.</p> v0.9.1 v1.0 <code>models.py</code> <code>show.py</code> <code>graph.py</code> <code>clip.py</code> <code>piechart.py</code> <code>write.py</code>"},{"location":"CHANGELOG/#fixes_1","title":"Fixes","text":"<ul> <li>Support almost all the possible extensions that has texts. </li> <li><code>.py</code>, <code>.c</code>, <code>.cpp</code>, <code>.java</code>, <code>.js</code>, <code>.md</code>, <code>.txt</code>, <code>.go</code>...</li> <li>Used simpler and faster built-in libraries like <code>shutil</code> &amp; <code>glob</code> for faster implementation with compact codebase.</li> </ul>"},{"location":"CHANGELOG/#added","title":"Added","text":"<ul> <li>A new feature that scrapes the content from cl1p.net, and displays the content in console output with indentation.     &gt; <code>scrap.py</code></li> <li>Yet another feature that has merged <code>show</code>, <code>clip</code>,and <code>write</code> in one file.     &gt; <code>display.pt</code> </li> </ul>"},{"location":"CHANGELOG/#v091-2024-04-08","title":"v0.9.1 - 2024-04-08","text":""},{"location":"CHANGELOG/#added_1","title":"Added","text":"<ul> <li>Clipboard feature (src code will copied into os clipboard)</li> </ul>"},{"location":"CHANGELOG/#fixes_2","title":"Fixes","text":"<ul> <li>Bug Fixes for the clipboard feature</li> </ul>"},{"location":"CHANGELOG/#stable-release_1","title":"[Stable-Release]","text":""},{"location":"CHANGELOG/#v071-2024-03-29","title":"v0.7.1 - 2024-03-29","text":""},{"location":"CHANGELOG/#added_2","title":"Added","text":"<ul> <li>Browser Code</li> <li>All subject code</li> </ul>"},{"location":"CHANGELOG/#fixes_3","title":"Fixes","text":"<ul> <li>Integrated functioning code snippets</li> </ul>"},{"location":"CHANGELOG/#changes_1","title":"Changes","text":"<ul> <li>New package added for testing <code>graph</code>.</li> </ul>"},{"location":"CHANGELOG/#pre-release","title":"[Pre-release]","text":""},{"location":"CHANGELOG/#v02-2024-02-04","title":"v0.2 - 2024-02-04","text":""},{"location":"CHANGELOG/#added_3","title":"Added","text":"<ul> <li>Introduces additional source code to PyPI.</li> </ul>"},{"location":"CHANGELOG/#fixes_4","title":"Fixes","text":"<ul> <li>Enhances ease of implementation.</li> </ul>"},{"location":"CHANGELOG/#changes_2","title":"Changes","text":"<ul> <li>Renamed import from <code>lib</code> to <code>display</code>.</li> </ul>"},{"location":"CHANGELOG/#unreleased","title":"[Unreleased]","text":""},{"location":"CHANGELOG/#v01-2024-02-04","title":"v0.1 - 2024-02-04","text":""},{"location":"CHANGELOG/#added_4","title":"Added","text":"<ul> <li>Uploaded testing source data.</li> <li>Implemented discreet source code display.</li> </ul>"},{"location":"CHANGELOG/#fixes_5","title":"Fixes","text":"<ul> <li>No fixes were required for the initial release.</li> </ul>"},{"location":"LICENSE/","title":"License","text":"<p>The project works by highlighting and improving security measures by demonstrating potential vulnerabilities when the system is connected with pip. It is licensed under the GPL 3.0, allowing you to sneakily use and modify it as needed.</p>"},{"location":"PyPi_Setup/","title":"PyPi setup","text":""},{"location":"PyPi_Setup/#1-introduction","title":"1. Introduction","text":"<p>In this guide, We will provide you with a comprehensive overview of how to set up and deploy a Python package to the Python Package Index (PyPI). This package is designed to facilitate the sharing of Python projects, enabling you to install it easily using pip.</p>"},{"location":"PyPi_Setup/#purpose","title":"Purpose","text":"<p>The objectives of this guide is to help you to:</p> <ul> <li>Understand the necessary setup for your package</li> <li>Deploy your package to PyPI</li> <li>Install your package easily on any system</li> </ul>"},{"location":"PyPi_Setup/#2-pre-requisites","title":"2. Pre-requisites","text":"<p>Before you begin, ensure that you have the following tools installed:</p>"},{"location":"PyPi_Setup/#required-tools","title":"Required Tools","text":"<ul> <li>Python (version 3.6 or above)</li> <li>pip (Python package manager)</li> <li>setuptools, wheel, twine (for building and uploading packages)</li> </ul>"},{"location":"PyPi_Setup/#3-installations","title":"3. Installations","text":"<p>To prepare your environment, upgrade pip, setuptools, and wheel:</p> <pre><code>sudo python -m pip install --upgrade pip setuptools wheel\n</code></pre> <p>Next, install <code>tqdm</code> and <code>Twine</code>:</p> <pre><code>sudo python -m pip install tqdm\nsudo python -m pip install --user --upgrade twine\n</code></pre> <p>These tools are essential for building and uploading your package.</p>"},{"location":"PyPi_Setup/#4-project-structure","title":"4. Project Structure","text":"<pre><code>sneaky_package/\n\u2502\n\u251c\u2500\u2500 package/                              # Main package directory\n\u2502   \u251c\u2500\u2500 stash/                            # Stash directory for files integration\n\u2502   \u2502   \u2514\u2500\u2500 test.py                       # test script for checking\n\u2502   \u251c\u2500\u2500 display.py                        \n\u2502   \u251c\u2500\u2500 graph.py                          \n\u2502   \u251c\u2500\u2500 models.py                        \n\u2502   \u2514\u2500\u2500 piechart.py                      \n\u251c\u2500\u2500 LICENSE                               # License information for the project\n\u251c\u2500\u2500 README.md                             # Documentation about the project\n\u2514\u2500\u2500 setup.py                              # Setup script for packaging the project\n</code></pre>"},{"location":"PyPi_Setup/#note","title":"Note","text":"<p>Feel free to change any filenames or directory names to better suit your needs. </p> <p>The filenames in the stash/ directory are aliases, you can modify them as necessary!</p>"},{"location":"PyPi_Setup/#explanation-of-key-files-directories","title":"Explanation of Key Files/ Directories","text":"<ul> <li>package/:   The <code>package</code> directory is the main directory containing the core functionality of your project. Each file within this directory serves a specific purpose:</li> <li>display.py: Contains functions related to displaying information or output to the user.</li> <li>graph.py: Provides functionalities for displaying and copying code snippets to the clipboard, often involving authentication mechanisms.</li> <li>models.py: Contains data models and associated methods that manage the data being processed or manipulated within the package.</li> <li> <p>piechart.py: Includes functionalities for plotting and copying code snippets, typically related to pie chart representations.</p> </li> <li> <p>setup.py: This file is essential for packaging your project using setuptools. It specifies metadata about the package, including:</p> </li> <li><code>name</code>: The name of the package, which should be unique within the Python Package Index (PyPI).</li> <li><code>version</code>: The current version of the package.</li> <li><code>packages</code>: Uses <code>find_packages()</code> to automatically find and include all packages and subpackages.</li> <li><code>description</code>: A brief summary of what the package does.</li> <li><code>author</code> and <code>author_email</code>: Information about the package author.</li> <li><code>license</code>: Specifies the license under which the package is released.</li> <li> <p><code>install_requires</code>: A list of dependencies that are required for the package to function, allowing automatic installation of these packages when your package is installed.</p> </li> <li> <p>LICENSE: Contains the legal information regarding the usage, modification, and distribution of the project. This file helps clarify the terms under which the code can be used by others.</p> </li> <li> <p>README.md: Provides an overview of the project, including how to install and use it. It serves as the first point of contact for users and contributors, helping them understand the purpose of the project and how to get started.</p> </li> </ul>"},{"location":"PyPi_Setup/#5-building-the-package","title":"5. Building the Package","text":""},{"location":"PyPi_Setup/#step-by-step-instructions","title":"Step-by-Step Instructions","text":"<ol> <li>Create or update the <code>setup.py</code> file in the root directory using the following structure:</li> </ol> <pre><code>from setuptools import setup, find_packages\n\nsetup(\n    name='custom_package_name',            # Replace with your actual package name\n    version='0.1',                         # Update version as needed\n    packages=find_packages(),              # Automatically find package directories\n    description='Your custom description', # Provide a brief description of your package\n    author='custom_author_name',           # Add your name or organization\n    author_email='youremail@gmail.com',    # Add your email address\n    license='GPL 3.0',                     # Specify the license type\n    install_requires=[                     # List any package dependencies here\n        # e.g., 'numpy&gt;=1.18.0',\n    ],\n)\n</code></pre> <p>Note:  Ensure that your package's structure is correct and that the <code>setup.py</code> file is properly configured.</p> <ol> <li>Build the Package by running:</li> </ol> <pre><code>python setup.py sdist bdist_wheel\n</code></pre> <p>This command will create a <code>dist/</code> directory containing <code>.tar.gz</code> and <code>.whl</code> files.</p>"},{"location":"PyPi_Setup/#6-uploading-to-pypi","title":"6. Uploading to PyPI","text":""},{"location":"PyPi_Setup/#detailed-steps-for-deployment","title":"Detailed Steps for Deployment","text":"<ol> <li> <p>Create a PyPI Account:</p> </li> <li> <p>Go to PyPI and click on \"Register\" to create an account if you don\u2019t have one.</p> <p></p> </li> <li> <p>Fill in the required information (username, password, email) and click on Create Account.</p> </li> <li>After logging in, verify your email address by clicking on the link sent to your email.</li> <li> <p>Once verified, go to your account settings and navigate to the API tokens section.</p> <p></p> </li> </ol> <p>### NOTE: To create an API token, you must enable Two-factor Authentication</p> <ul> <li> <p>Click on \"Add API token\" to generate a new token. This token will be used for authentication when uploading packages.</p> <p></p> <p>under \"select scope\", select your project.</p> </li> <li> <p>Upload the Package Using Twine:</p> <ul> <li>First, ensure you have Twine installed. If not, you can install it using pip:  <pre><code>pip install twine\n</code></pre></li> <li>Next, navigate to the directory containing your package files in the terminal.</li> <li>Create a source distribution of your package by running:  <pre><code>python setup.py sdist bdist_wheel\n</code></pre></li> <li>Use your API token for authentication when uploading:  <pre><code>twine upload dist/* --username __token__ --password &lt;YOUR_API_TOKEN&gt;\n</code></pre></li> <li>Replace <code>&lt;YOUR_API_TOKEN&gt;</code> with the actual token you generated earlier.</li> <li>You should see a confirmation message once the upload is successful.</li> </ul> </li> <li> <p>Make sure Twine is installed and run:</p> </li> </ul> <pre><code>twine upload dist/*\n</code></pre> <p>This command will prompt you for your PyPI credentials. If you haven't logged in yet, you'll need to enter them.</p>"},{"location":"PyPi_Setup/#optional-upload-using-pypi-api-token","title":"Optional: Upload Using PyPI API Token","text":"<ol> <li>Create an API Token on PyPI:</li> <li>Log into your PyPI account.</li> <li>Go to Account Settings and generate an API token.</li> <li> <p>Store the token securely.</p> </li> <li> <p>Upload Package with API Token:</p> </li> </ol> <pre><code>twine upload dist/* --username __token__ --password &lt;YOUR_API_TOKEN&gt;\n</code></pre> <p>Replace <code>&lt;YOUR_API_TOKEN&gt;</code> with your generated token.</p>"},{"location":"PyPi_Setup/#7-installation-instructions","title":"7. Installation Instructions","text":"<p>Once your package is deployed, users can install it via pip:</p> <pre><code>pip install your_package_name\n</code></pre> <p>This command will download and install the latest version of your package from PyPI.</p>"},{"location":"PyPi_Setup/#8-troubleshooting","title":"8. Troubleshooting","text":""},{"location":"PyPi_Setup/#common-issues-and-solutions","title":"Common Issues and Solutions","text":"<ul> <li>Issue: Build fails due to missing setuptools or wheel Solution: Ensure you have the latest versions installed:</li> </ul> <pre><code>python -m pip install --upgrade setuptools wheel\n</code></pre> <ul> <li> <p>Issue: Twine upload failed with authentication error Solution: Verify that you are using the correct PyPI token; regenerate it if necessary.</p> </li> <li> <p>Issue: Unable to find package after uploading Solution: Double-check that the package name in your <code>setup.py</code> matches what was uploaded on PyPI.</p> </li> <li> <p>Issue: Invalid version error Solution: Ensure your version number follows the correct format (e.g., <code>0.1</code>, <code>1.0.0</code>).</p> </li> </ul>"},{"location":"development-guidelines/","title":"Development Environment Setup","text":""},{"location":"development-guidelines/#cloning-the-repository","title":"Cloning the Repository","text":"<p>To create a local copy of the Sneaky Package, follow these simple steps:</p> <ol> <li>Open your terminal (or command prompt).</li> <li>Navigate to the directory where you want to store the project. You can use the <code>cd</code> command to change directories.</li> <li>Run the following command to clone the repository:</li> </ol> <pre><code>git clone https://github.com/AmateursLeague/sneaky-package.git\ncd sneaky-package\n</code></pre> <p>This command will download the repository into a folder named <code>sneaky-package</code>. You can now navigate into this folder to start working on the project.</p>"},{"location":"development-guidelines/#setting-up-your-development-environment","title":"Setting Up Your Development Environment","text":"<p>Now that you have the repository, follow these steps to set up your development environment:</p> <ol> <li>Run the install script: This script installs all the necessary software dependencies for the project. In your terminal, enter:</li> </ol> <pre><code>./install.sh\n</code></pre> <ol> <li> <p>Explore the project: After the dependencies are installed, feel free to propose changes, fix any bugs, or add new features!</p> </li> <li> <p>Store files: If you have any files you want to integrate into another machine, place them in the <code>package/stash</code> directory.</p> </li> <li> <p>Register on PyPI: Go to the PyPI website to create an account. After registering, generate an API token and make sure to store it securely.</p> </li> <li> <p>Run the build script: Finally, run the build script to package your project for deployment. Use this command:</p> </li> </ol> <pre><code>./build.sh\n</code></pre> <p>This script will ask you for some information, including the package name, version, description, author name, email, and your API token. Enter this information, and your package will be deployed to PyPI!</p> <p>By following these steps, you'll have a fully set up development environment, allowing you to easily enhance the Sneaky Package. If you have any questions along the way, don't hesitate to ask for help!</p>"},{"location":"how-it-works/","title":"How it Works?","text":""},{"location":"how-it-works/#overview","title":"Overview","text":"<p>matplotlib-visual is a Python package designed to streamline the handling and sharing of content with various built-in features like displaying, copying to clipboard, writing to files, and interacting with content on cl1p.net, a web-based clipboard service.</p> <p>The package includes the following features:</p> <ul> <li><code>show</code>: Display specified content.</li> <li><code>clip</code>: Copy content to the system clipboard.</li> <li><code>write</code>: Save content to a file.</li> <li><code>scrap</code>: Fetch content from cl1p.net.</li> <li><code>create</code>: Store content on cl1p.net.</li> </ul>"},{"location":"how-it-works/#installation","title":"Installation","text":"<p>To get started, install the matplotlib-visual package via pip:</p> <pre><code>pip install matplotlib-visual\n</code></pre>"},{"location":"how-it-works/#project-structure","title":"Project Structure","text":"<p>The package contains <code>.py</code> files for each feature located in:</p> <pre><code>\u251c\u2500\u2500 docs/                  # Documentation files\n\u251c\u2500\u2500 package/               # Main package files\n\u2502   \u251c\u2500\u2500 stash/             # Feature implementation files\n\u2502       \u2514\u2500\u2500 test/py        # Integration files\n\u2502   \u251c\u2500\u2500 show.py            # Implementation for displaying content\n\u2502   \u251c\u2500\u2500 clip.py            # Implementation for clipboard functionality\n\u2502   \u251c\u2500\u2500 write.py           # Implementation for writing to files\n\u2502   \u251c\u2500\u2500 scrap.py           # Implementation for fetching content from cl1p.net\n\u2502   \u2514\u2500\u2500 create.py          # Implementation for storing content on cl1p.net\n\u251c\u2500\u2500 scripts/               # Scripts for installation and building\n\u2502   \u251c\u2500\u2500 install.sh         # Installation script\n\u2502   \u2514\u2500\u2500 build.sh           # Build script\n\u251c\u2500\u2500 tests/                 # Unit tests for the package\n\u251c\u2500\u2500 CHANGELOG.md           # Change log for version updates\n\u251c\u2500\u2500 CODE_OF_CONDUCT.md     # Code of conduct for contributors\n\u251c\u2500\u2500 LICENSE                # License file\n\u251c\u2500\u2500 mkdocs.yml             # Configuration for documentation site\n\u251c\u2500\u2500 README.md              # Overview of the package\n\u2514\u2500\u2500 setup.py               # Setup script for package installation\n</code></pre> <p>Make sure to store the <code>.py</code> files in the <code>stash/</code> folder so that they can be accessed using the features we have.</p>"},{"location":"how-it-works/#how-to-use","title":"How to Use","text":"<p>After installing the package, you can access its features by importing them into your Python environment.</p>"},{"location":"how-it-works/#1-display-content-with-show","title":"1. Display Content with <code>show</code>","text":"<p>To display any text or data, use the <code>display</code> function from <code>package.show</code>.</p> <pre><code>from package.show import display\ndisplay('test')\n</code></pre>"},{"location":"how-it-works/#2-copy-to-clipboard-with-clip","title":"2. Copy to Clipboard with <code>clip</code>","text":"<p>To copy text to your system\u2019s clipboard, use the <code>display</code> function from <code>package.clip</code>.</p> <pre><code>from package.clip import display\ndisplay('test')\n</code></pre>"},{"location":"how-it-works/#3-write-content-to-file-with-write","title":"3. Write Content to File with <code>write</code>","text":"<p>To save content into a file, use the <code>plot</code> function from <code>package.write</code>. The content will be saved in the root directory of your current execution environment.</p> <pre><code>from package.write import plot\nplot('test')\n</code></pre>"},{"location":"how-it-works/#4-fetch-content-from-cl1pnet-with-scrap","title":"4. Fetch Content from cl1p.net with <code>scrap</code>","text":"<p>To retrieve previously stored content from cl1p.net, use the <code>grab</code> function from <code>package.scrap</code>, specifying the unique URL name.</p> <pre><code>from package.scrap import grab\ngrab('url-name')\n</code></pre>"},{"location":"how-it-works/#5-store-content-on-cl1pnet-with-create","title":"5. Store Content on cl1p.net with <code>create</code>","text":"<p>To store content on cl1p.net under a specific URL name, use the <code>create</code> function from <code>package.create</code>.</p> <pre><code>from package.create import display\ncreate('the content to be stored', 'url-name')\n</code></pre>"},{"location":"how-it-works/#additional-notes","title":"Additional Notes","text":"<ul> <li>Make sure that any URLs you use with <code>scrap</code> and <code>create</code> are accessible and unique to avoid conflicts on cl1p.net.</li> <li>This package is ideal for quickly sharing and saving snippets of text or notes across platforms and with other applications.</li> </ul>"},{"location":"how-it-works/#contributing","title":"Contributing","text":"<p>If you'd like to contribute or report any issues, please refer to the GitHub repository for guidelines and more information.</p>"}]}