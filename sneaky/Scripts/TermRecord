#!C:\Users\Tannu Choudhary\cadbury-sneaky\sneaky\Scripts\python.exe
# -*- coding: utf-8 -*-
# vim: set nospell:
##############################################################################
# TermRecord.py                                                              #
#                                                                            #
# This file can either run the 'script' command as a wrapper, or parse its   #
# output with timing information.  It produces self-contained or dynamic     #
# HTML files capable of replaying the terminal session with just a modern    #
# browser.                                                                   #
#                                                                            #
#                                                                            #
#   Authors: Wolfgang Richter <wolfgang.richter@gmail.com>                   #
#                                                                            #
#                                                                            #
#   Copyright 2014-2017 Wolfgang Richter and licensed under the MIT License. #
#                                                                            #
##############################################################################



from argparse import ArgumentParser, FileType
from contextlib import closing
from codecs import open as copen
from json import dumps
from math import ceil
from os.path import basename, dirname, exists, join
from struct import unpack
from subprocess import Popen
from sys import platform, prefix, stderr
from tempfile import NamedTemporaryFile
from termrecord import templated

from jinja2 import FileSystemLoader, Template
from jinja2.environment import  Environment



DEFAULT_TEMPLATE    =   join(templated(), 'static.jinja2')
TTYREC              =   'ttyrec'



# http://blog.taz.net.au/2012/04/09/getting-the-terminal-size-in-python/
def probeDimensions(fd=1):
    """
    Returns height and width of current terminal. First tries to get
    size via termios.TIOCGWINSZ, then from environment. Defaults to 25
    lines x 80 columns if both methods fail.

    :param fd: file descriptor (default: 1=stdout)
    """
    try:
        import fcntl, termios, struct
        hw = struct.unpack('hh', fcntl.ioctl(fd, termios.TIOCGWINSZ, '1234'))
    except:
        try:
            hw = (os.environ['LINES'], os.environ['COLUMNS'])
        except:
            hw = (24, 80)

    return hw

# http://stackoverflow.com/a/8220141/3362361
def testOSX():
    return platform == 'darwin'

def escapeString(string):
    string = string.encode('unicode_escape').decode('utf-8')
    string = string.replace("'", "\\'")
    string = '\'' + string + '\''
    return string

def runScript(command=None, tempfile=None):
    timingfname = None
    scriptfname = None
    CMD = ['script']

    if tempfile:
        timingfname = "%s.timing" % str(tempfile)
        scriptfname = "%s.log" % str(tempfile)
        with open(timingfname, 'w'):
            with open(scriptfname, 'w'):
                pass
    else:
        with NamedTemporaryFile(delete=False) as timingf:
            with NamedTemporaryFile(delete=False) as scriptf:
                timingfname = timingf.name
                scriptfname = scriptf.name

    CMD.append('-t')

    if command:
        CMD.append('-c')
        CMD.append(command)

    CMD.append(scriptfname)

    with open(timingfname, 'w') as timingf:
        proc = Popen(CMD, stderr=timingf)
        proc.wait()

    return copen(scriptfname, encoding='utf-8', errors='replace'), \
           open(timingfname, 'r')

def runTtyrec(command=None):
    scriptfname = None
    CMD = ['ttyrec']

    with NamedTemporaryFile(delete=False) as scriptf:
        scriptfname = scriptf.name

    if command:
        CMD.append('-e')
        CMD.append(command)

    CMD.append(scriptfname)

    proc = Popen(CMD)
    proc.wait()
    return open(scriptfname, 'rb')

def getTiming(timef):
    timing = None
    with closing(timef):
        timing = [l.strip().split(' ') for l in timef]
        timing = [(int(ceil(float(r[0]) * 1000)), int(r[1])) for r in timing]
    return timing

def scriptToJSON(scriptf, timing=None):
    ret = []

    with closing(scriptf):
        scriptf.readline() # ignore first header line from script file
        offset = 0
        for t in timing:
            data = escapeString(scriptf.read(t[1]))
            offset += t[0]
            ret.append((data, offset))
    return dumps(ret)

def parseTtyrec(scriptf):
    pos = 0
    offset = 0
    oldtime = 0
    ret = []

    with closing(scriptf):
        data = scriptf.read()
        while pos < len(data):
            secs,usecs,amount = unpack('iii', data[pos:pos+12])
            pos += 12
            timing = int(ceil(secs * 1000 + float(usecs) / 1000))
            if oldtime: offset += timing - oldtime
            oldtime = timing
            ret.append((escapeString(data[pos:pos+amount].decode(
                        encoding='utf-8', errors='replace')), offset))
            pos += amount
    return dumps(ret)

def renderTemplate(json, dimensions, templatename, outfname=None):
    fsl = FileSystemLoader(dirname(templatename), 'utf-8')
    e = Environment()
    e.loader = fsl

    templatename = basename(templatename)
    rendered = e.get_template(templatename).render(json=json,
                                                   dimensions=dimensions)

    if not outfname:
        return rendered

    with closing(outfname):
        outfname.write(rendered)



if __name__ == '__main__':
    argparser   =   ArgumentParser(description=
                                        'Stores terminal sessions into HTML.')

    argparser.add_argument('-b', '--backend', type=str,
                           choices=['script', 'ttyrec'],
                           help='use either script or ttyrec', required=False)
    argparser.add_argument('-c', '--command', type=str,
                           help='run a command and quit', required=False)
    argparser.add_argument('-d', '--dimensions', type=int,
                           metavar=('h','w'), nargs=2,
                           help='dimensions of terminal', required=False)
    argparser.add_argument('--json',
                           help='output only JSON', action='store_true',
                           required=False)
    argparser.add_argument('--js',
                           help='output only JavaScript', action='store_true',
                           required=False)
    argparser.add_argument('-m', '--template-file', type=str,
                           default=DEFAULT_TEMPLATE,
                           help='file to use as HTML template', required=False)
    argparser.add_argument('-o', '--output-file', type=FileType('w'),
                           help='file to output HTML to', required=False)
    argparser.add_argument('-s', '--script-file', type=str,
                           help='script file to parse', required=False)
    argparser.add_argument('-t', '--timing-file', type=FileType('r'),
                           help='timing file to parse', required=False)
    argparser.add_argument('--tempfile', type=str,
                           help='full path for tempfiles (extensions will be added)', required=False)

    ns = argparser.parse_args()

    backend     =   ns.backend
    command     =   ns.command
    dimensions  =   ns.dimensions
    tmpname     =   ns.template_file
    scriptf     =   ns.script_file
    outf        =   ns.output_file
    timef       =   ns.timing_file
    tempfile    =   ns.tempfile
    json_only   =   ns.json
    js_only     =   ns.js
    isOSX       =   testOSX()

    if backend != TTYREC and ((scriptf and not timef) or \
                              (timef and not scriptf)):
        argparser.error('Both SCRIPT_FILE and TIMING_FILE have to be ' +
                        'specified together.')
        exit(1)

    if not backend:
        if isOSX:
            backend = TTYREC
        else:
            backend = 'script'

    if not json_only and not js_only and tmpname and not exists(tmpname):
        stderr.write('Error: Template ("%s") does not exist.\n' % (tmpname))
        stderr.write('If you only wanted JSON output, use "--json"\n')
        stderr.write('If you only wanted JavaScript output, use "--js"\n')
        exit(1)

    if not dimensions:
        dimensions = probeDimensions() if not scriptf else (24,80)

    if not scriptf:
        if backend == TTYREC:
            scriptf = runTtyrec(command)
        else:
            scriptf,timef = runScript(command=command, tempfile=tempfile)
    else:
        if backend == TTYREC:
            scriptf = open(scriptf, 'rb')
        else:
            scriptf = copen(scriptf, encoding='utf-8', errors='replace')


    if backend == TTYREC:
        json = parseTtyrec(scriptf)
    else:
        timing = getTiming(timef)
        json = scriptToJSON(scriptf, timing)

    if json_only:
        print(json)
    elif js_only:
        print('JS ONLY PLEASE IMPLEMENT ME.')
    elif tmpname and outf:
        renderTemplate(json, dimensions, tmpname, outf)
    elif tmpname:
        print(renderTemplate(json, dimensions, tmpname))
